// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/sankethkini/NewsLetter-Backend/internal/service/news_letter (interfaces: DB)

// Package newsletter is a generated GoMock package.
package newsletter

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockDB is a mock of DB interface.
type MockDB struct {
	ctrl     *gomock.Controller
	recorder *MockDBMockRecorder
}

// MockDBMockRecorder is the mock recorder for MockDB.
type MockDBMockRecorder struct {
	mock *MockDB
}

// NewMockDB creates a new mock instance.
func NewMockDB(ctrl *gomock.Controller) *MockDB {
	mock := &MockDB{ctrl: ctrl}
	mock.recorder = &MockDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDB) EXPECT() *MockDBMockRecorder {
	return m.recorder
}

// addNewsLetter mocks base method.
func (m *MockDB) addNewsLetter(arg0 context.Context, arg1 *NewsLetterModel) (*NewsLetterModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "addNewsLetter", arg0, arg1)
	ret0, _ := ret[0].(*NewsLetterModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// addNewsLetter indicates an expected call of addNewsLetter.
func (mr *MockDBMockRecorder) addNewsLetter(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "addNewsLetter", reflect.TypeOf((*MockDB)(nil).addNewsLetter), arg0, arg1)
}

// addSchemeToNews mocks base method.
func (m *MockDB) addSchemeToNews(arg0 context.Context, arg1 AddSchemeRequest) (*NewsSchemes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "addSchemeToNews", arg0, arg1)
	ret0, _ := ret[0].(*NewsSchemes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// addSchemeToNews indicates an expected call of addSchemeToNews.
func (mr *MockDBMockRecorder) addSchemeToNews(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "addSchemeToNews", reflect.TypeOf((*MockDB)(nil).addSchemeToNews), arg0, arg1)
}

// getNewsLetter mocks base method.
func (m *MockDB) getNewsLetter(arg0 context.Context, arg1 string) (*NewsLetterModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getNewsLetter", arg0, arg1)
	ret0, _ := ret[0].(*NewsLetterModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// getNewsLetter indicates an expected call of getNewsLetter.
func (mr *MockDBMockRecorder) getNewsLetter(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getNewsLetter", reflect.TypeOf((*MockDB)(nil).getNewsLetter), arg0, arg1)
}
