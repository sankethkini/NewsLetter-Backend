// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/sankethkini/NewsLetter-Backend/internal/service/subscription (interfaces: DB)

// Package subscription is a generated GoMock package.
package subscription

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockDB is a mock of DB interface.
type MockDB struct {
	ctrl     *gomock.Controller
	recorder *MockDBMockRecorder
}

// MockDBMockRecorder is the mock recorder for MockDB.
type MockDBMockRecorder struct {
	mock *MockDB
}

// NewMockDB creates a new mock instance.
func NewMockDB(ctrl *gomock.Controller) *MockDB {
	mock := &MockDB{ctrl: ctrl}
	mock.recorder = &MockDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDB) EXPECT() *MockDBMockRecorder {
	return m.recorder
}

// addUser mocks base method.
func (m *MockDB) addUser(arg0 context.Context, arg1 AddUserRequest) ([]UserSubscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "addUser", arg0, arg1)
	ret0, _ := ret[0].([]UserSubscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// addUser indicates an expected call of addUser.
func (mr *MockDBMockRecorder) addUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "addUser", reflect.TypeOf((*MockDB)(nil).addUser), arg0, arg1)
}

// createScheme mocks base method.
func (m *MockDB) createScheme(arg0 context.Context, arg1 *SubscriptionModel) (*SubscriptionModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "createScheme", arg0, arg1)
	ret0, _ := ret[0].(*SubscriptionModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// createScheme indicates an expected call of createScheme.
func (mr *MockDBMockRecorder) createScheme(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "createScheme", reflect.TypeOf((*MockDB)(nil).createScheme), arg0, arg1)
}

// filter mocks base method.
func (m *MockDB) filter(arg0 context.Context, arg1 FilterRequest) ([]SubscriptionModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "filter", arg0, arg1)
	ret0, _ := ret[0].([]SubscriptionModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// filter indicates an expected call of filter.
func (mr *MockDBMockRecorder) filter(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "filter", reflect.TypeOf((*MockDB)(nil).filter), arg0, arg1)
}

// getSubscription mocks base method.
func (m *MockDB) getSubscription(arg0 context.Context, arg1 string) (*SubscriptionModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getSubscription", arg0, arg1)
	ret0, _ := ret[0].(*SubscriptionModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// getSubscription indicates an expected call of getSubscription.
func (mr *MockDBMockRecorder) getSubscription(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getSubscription", reflect.TypeOf((*MockDB)(nil).getSubscription), arg0, arg1)
}

// getUserScheme mocks base method.
func (m *MockDB) getUserScheme(arg0 context.Context, arg1 UserSchemeRequest) (*UserSubscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getUserScheme", arg0, arg1)
	ret0, _ := ret[0].(*UserSubscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// getUserScheme indicates an expected call of getUserScheme.
func (mr *MockDBMockRecorder) getUserScheme(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getUserScheme", reflect.TypeOf((*MockDB)(nil).getUserScheme), arg0, arg1)
}

// getUsers mocks base method.
func (m *MockDB) getUsers(arg0 context.Context, arg1 string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getUsers", arg0, arg1)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// getUsers indicates an expected call of getUsers.
func (mr *MockDBMockRecorder) getUsers(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getUsers", reflect.TypeOf((*MockDB)(nil).getUsers), arg0, arg1)
}

// removeUser mocks base method.
func (m *MockDB) removeUser(arg0 context.Context, arg1 UserSchemeRequest) ([]UserSubscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "removeUser", arg0, arg1)
	ret0, _ := ret[0].([]UserSubscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// removeUser indicates an expected call of removeUser.
func (mr *MockDBMockRecorder) removeUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "removeUser", reflect.TypeOf((*MockDB)(nil).removeUser), arg0, arg1)
}

// renew mocks base method.
func (m *MockDB) renew(arg0 context.Context, arg1 UserSchemeRequest, arg2 time.Time) (*UserSubscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "renew", arg0, arg1, arg2)
	ret0, _ := ret[0].(*UserSubscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// renew indicates an expected call of renew.
func (mr *MockDBMockRecorder) renew(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "renew", reflect.TypeOf((*MockDB)(nil).renew), arg0, arg1, arg2)
}

// search mocks base method.
func (m *MockDB) search(arg0 context.Context, arg1 SearchRequest) ([]SubscriptionModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "search", arg0, arg1)
	ret0, _ := ret[0].([]SubscriptionModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// search indicates an expected call of search.
func (mr *MockDBMockRecorder) search(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "search", reflect.TypeOf((*MockDB)(nil).search), arg0, arg1)
}

// sort mocks base method.
func (m *MockDB) sort(arg0 context.Context, arg1 string) ([]SubscriptionModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "sort", arg0, arg1)
	ret0, _ := ret[0].([]SubscriptionModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// sort indicates an expected call of sort.
func (mr *MockDBMockRecorder) sort(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "sort", reflect.TypeOf((*MockDB)(nil).sort), arg0, arg1)
}
