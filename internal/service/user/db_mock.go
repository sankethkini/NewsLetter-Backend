// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/sankethkini/NewsLetter-Backend/internal/service/user (interfaces: DB)

// Package user is a generated GoMock package.
package user

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockDB is a mock of DB interface.
type MockDB struct {
	ctrl     *gomock.Controller
	recorder *MockDBMockRecorder
}

// MockDBMockRecorder is the mock recorder for MockDB.
type MockDBMockRecorder struct {
	mock *MockDB
}

// NewMockDB creates a new mock instance.
func NewMockDB(ctrl *gomock.Controller) *MockDB {
	mock := &MockDB{ctrl: ctrl}
	mock.recorder = &MockDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDB) EXPECT() *MockDBMockRecorder {
	return m.recorder
}

// getEmail mocks base method.
func (m *MockDB) getEmail(arg0 context.Context, arg1 GetEmailRequest) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getEmail", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// getEmail indicates an expected call of getEmail.
func (mr *MockDBMockRecorder) getEmail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getEmail", reflect.TypeOf((*MockDB)(nil).getEmail), arg0, arg1)
}

// getUser mocks base method.
func (m *MockDB) getUser(arg0 context.Context, arg1 SignInRequest) (*UserModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getUser", arg0, arg1)
	ret0, _ := ret[0].(*UserModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// getUser indicates an expected call of getUser.
func (mr *MockDBMockRecorder) getUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getUser", reflect.TypeOf((*MockDB)(nil).getUser), arg0, arg1)
}

// insertUser mocks base method.
func (m *MockDB) insertUser(arg0 context.Context, arg1 *UserModel) (*UserModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "insertUser", arg0, arg1)
	ret0, _ := ret[0].(*UserModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// insertUser indicates an expected call of insertUser.
func (mr *MockDBMockRecorder) insertUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "insertUser", reflect.TypeOf((*MockDB)(nil).insertUser), arg0, arg1)
}
