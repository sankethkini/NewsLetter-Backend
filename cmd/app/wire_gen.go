// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package app

import (
	"github.com/google/wire"
	"github.com/sankethkini/NewsLetter-Backend/internal/config"
	"github.com/sankethkini/NewsLetter-Backend/internal/service/user"
	"github.com/sankethkini/NewsLetter-Backend/pkg/auth"
	"github.com/sankethkini/NewsLetter-Backend/pkg/database"
)

// Injectors from wire.go:

func IntializeServerConfig() (config.ServerConfig, error) {
	appConfig, err := config.LoadConfig()
	if err != nil {
		return config.ServerConfig{}, err
	}
	serverConfig := config.LaodServerConfig(appConfig)
	return serverConfig, nil
}

func IntializeJWT() (*auth.AuthInterceptor, error) {
	appConfig, err := config.LoadConfig()
	if err != nil {
		return nil, err
	}
	jwtConfig := config.LoadJWTConfig(appConfig)
	jwtManager := auth.NewJWTManager(jwtConfig)
	v := config.LoadAccessibleRoles()
	authInterceptor := auth.NewAuthInterceptor(jwtManager, v)
	return authInterceptor, nil
}

func IntializeUserRepo() (*user.UserServiceImpl, func(), error) {
	appConfig, err := config.LoadConfig()
	if err != nil {
		return nil, nil, err
	}
	configDatabase := config.LoadDataBaseConfig(appConfig)
	db, cleanup, err := database.Open(configDatabase)
	if err != nil {
		return nil, nil, err
	}
	userDB := user.NewDB(db)
	jwtConfig := config.LoadJWTConfig(appConfig)
	jwtManager := auth.NewJWTManager(jwtConfig)
	userServiceImpl := user.NewUserService(userDB, jwtManager)
	return userServiceImpl, func() {
		cleanup()
	}, nil
}

// wire.go:

var JWTProviderSet = wire.NewSet(config.LoadConfig, config.LoadJWTConfig, auth.NewJWTManager)
