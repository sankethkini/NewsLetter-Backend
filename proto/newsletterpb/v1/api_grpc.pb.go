// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: newsletterpb/v1/api.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// NewsLetterServiceClient is the client API for NewsLetterService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NewsLetterServiceClient interface {
	CreateNewsLetter(ctx context.Context, in *CreateNewsLetterRequest, opts ...grpc.CallOption) (*NewsLetter, error)
	AddSchemeToNews(ctx context.Context, in *NewsScheme, opts ...grpc.CallOption) (*NewsScheme, error)
}

type newsLetterServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNewsLetterServiceClient(cc grpc.ClientConnInterface) NewsLetterServiceClient {
	return &newsLetterServiceClient{cc}
}

func (c *newsLetterServiceClient) CreateNewsLetter(ctx context.Context, in *CreateNewsLetterRequest, opts ...grpc.CallOption) (*NewsLetter, error) {
	out := new(NewsLetter)
	err := c.cc.Invoke(ctx, "/newsletterpb.v1.NewsLetterService/CreateNewsLetter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *newsLetterServiceClient) AddSchemeToNews(ctx context.Context, in *NewsScheme, opts ...grpc.CallOption) (*NewsScheme, error) {
	out := new(NewsScheme)
	err := c.cc.Invoke(ctx, "/newsletterpb.v1.NewsLetterService/AddSchemeToNews", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NewsLetterServiceServer is the server API for NewsLetterService service.
// All implementations must embed UnimplementedNewsLetterServiceServer
// for forward compatibility
type NewsLetterServiceServer interface {
	CreateNewsLetter(context.Context, *CreateNewsLetterRequest) (*NewsLetter, error)
	AddSchemeToNews(context.Context, *NewsScheme) (*NewsScheme, error)
	mustEmbedUnimplementedNewsLetterServiceServer()
}

// UnimplementedNewsLetterServiceServer must be embedded to have forward compatible implementations.
type UnimplementedNewsLetterServiceServer struct {
}

func (UnimplementedNewsLetterServiceServer) CreateNewsLetter(context.Context, *CreateNewsLetterRequest) (*NewsLetter, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNewsLetter not implemented")
}
func (UnimplementedNewsLetterServiceServer) AddSchemeToNews(context.Context, *NewsScheme) (*NewsScheme, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddSchemeToNews not implemented")
}
func (UnimplementedNewsLetterServiceServer) mustEmbedUnimplementedNewsLetterServiceServer() {}

// UnsafeNewsLetterServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NewsLetterServiceServer will
// result in compilation errors.
type UnsafeNewsLetterServiceServer interface {
	mustEmbedUnimplementedNewsLetterServiceServer()
}

func RegisterNewsLetterServiceServer(s grpc.ServiceRegistrar, srv NewsLetterServiceServer) {
	s.RegisterService(&NewsLetterService_ServiceDesc, srv)
}

func _NewsLetterService_CreateNewsLetter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNewsLetterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NewsLetterServiceServer).CreateNewsLetter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/newsletterpb.v1.NewsLetterService/CreateNewsLetter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NewsLetterServiceServer).CreateNewsLetter(ctx, req.(*CreateNewsLetterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NewsLetterService_AddSchemeToNews_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewsScheme)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NewsLetterServiceServer).AddSchemeToNews(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/newsletterpb.v1.NewsLetterService/AddSchemeToNews",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NewsLetterServiceServer).AddSchemeToNews(ctx, req.(*NewsScheme))
	}
	return interceptor(ctx, in, info, handler)
}

// NewsLetterService_ServiceDesc is the grpc.ServiceDesc for NewsLetterService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NewsLetterService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "newsletterpb.v1.NewsLetterService",
	HandlerType: (*NewsLetterServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateNewsLetter",
			Handler:    _NewsLetterService_CreateNewsLetter_Handler,
		},
		{
			MethodName: "AddSchemeToNews",
			Handler:    _NewsLetterService_AddSchemeToNews_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "newsletterpb/v1/api.proto",
}
